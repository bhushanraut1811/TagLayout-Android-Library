package tagslayout;

import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.View;
import android.view.WindowManager;
import android.widget.LinearLayout;

/**
 * Created by bhushan.raut on 8/6/2016.
 */
public class TagsLayout extends LinearLayout {
    int parentWidth;
    /**
     * The amount of space used by children in the left gutter.
     */
    private int mLeftWidth;

    /**
     * The amount of space used by children in the right gutter.
     */
    private int mRightWidth;

    /**
     * These are used for computing child frames based on their gravity.
     */
    private final Rect mTmpContainerRect = new Rect();
    private final Rect mTmpChildRect = new Rect();

    public TagsLayout(Context context) {
        super(context);
    }

    public TagsLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    /**
     * Any layout manager that doesn't scroll will want this.
     */
    @Override
    public boolean shouldDelayChildPressedState() {
        return false;
    }

    /**
     * Ask all children to measure themselves and compute the measurement of this
     * layout based on the children.
     */
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int count = getChildCount();

        // These keep track of the space we are using on the left and right for
        // views positioned there; we need member variables so we can also use
        // these for layout later.

        int desiredWidth = 100;
        int desiredHeight = 100;

        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        int width;
        int height;

        //Measure Width
        if (widthMode == MeasureSpec.EXACTLY) {
            //Must be this size
            width = widthSize;
        } else if (widthMode == MeasureSpec.AT_MOST) {
            //Can't be bigger than...
            width = Math.min(desiredWidth, widthSize);
        } else {
            //Be whatever you want
            width = desiredWidth;
        }

        //Measure Height
        if (heightMode == MeasureSpec.EXACTLY) {
            //Must be this size
            height = heightSize;
        } else if (heightMode == MeasureSpec.AT_MOST) {
            //Can't be bigger than...
            height = Math.min(desiredHeight, heightSize);
        } else {
            //Be whatever you want
            height = desiredHeight;
        }


        //================================================
        mLeftWidth = 0;
        mRightWidth = 0;
        int h = getMeasuredHeight();
        int w = getMeasuredWidth();

        // Measurement will ultimately be computing these values.
        int maxHeight = 0;
        int maxWidth = 0;
        int childState = 0;

        // Iterate through all children, measuring them and computing our dimensions
        // from their size.
        int childWidth = 0, childHeight = 0;
        for (int i = 0; i < count; i++) {
            final View child = getChildAt(i);
            if (child.getVisibility() != GONE) {
                // Measure the child.
                childWidth = 0;
                childHeight = 0;

                measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);

                //calculate Box
                final LayoutParams lp = (LayoutParams) child.getLayoutParams();
                childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;
                childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;

                if (maxWidth + childWidth < width) {
                    maxWidth += childWidth;

                } else {
                    maxWidth = 0;
                    maxHeight += childHeight;
                     maxWidth += childWidth;
                }


                // Update our size information based on the layout params.  Children
                // that asked to be positioned on the left or right go in those gutters.



               /* maxWidth = Math.max(maxWidth,
                        child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);

                maxHeight = Math.max(maxHeight,
                        child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);
               */
                childState = combineMeasuredStates(childState, child.getMeasuredState());
            }
        }
        //for last lane we adding over here
        maxHeight += childHeight;
/*
        // Total width is the maximum width of all inner children plus the gutters.
        maxWidth += mLeftWidth + mRightWidth;

        // Check against our minimum height and width
        maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());
        maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());*/

        // Report our final dimensions.
        setMeasuredDimension(resolveSizeAndState(width, widthMeasureSpec, childState),
                resolveSizeAndState(maxHeight, heightMeasureSpec,
                        childState << MEASURED_HEIGHT_STATE_SHIFT));
    }

    /**
     * Position all children within this layout.
     */
    @Override
    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        final int count = getChildCount();

        // These are the far left and right edges in which we are performing layout.
        int leftPos = getPaddingLeft();
        int rightPos = right - left - getPaddingRight();

        int maxWidthLimit = rightPos;

        // These are the top and bottom edges in which we are performing layout.
        final int parentTop = getPaddingTop();
        final int parentBottom = bottom - top - getPaddingBottom();

        int maxHeightLimit = parentBottom;

        int laneWidth = 0;
        int laneBaseHeight = 0;
        int laneHeight = 0;

        for (int i = 0; i < count; i++) {
            final View child = getChildAt(i);
            if (child.getVisibility() != GONE) {

                final LayoutParams lp = (LayoutParams) child.getLayoutParams();
                final int width = child.getMeasuredWidth() +lp.rightMargin+lp.leftMargin;
                final int height = child.getMeasuredHeight()+lp.topMargin+lp.bottomMargin;

                if (width + laneWidth < maxWidthLimit) {
                    int previousLaneWidth = laneWidth;
                    laneWidth += width;
                  /*  mTmpContainerRect.left = previousLaneWidth;
                    mTmpContainerRect.right = laneWidth;
                    mTmpContainerRect.top = laneBaseHeight;
                    mTmpContainerRect.bottom = laneBaseHeight + height;*/
                    mTmpContainerRect.left = previousLaneWidth+lp.leftMargin;
                    mTmpContainerRect.right = laneWidth-lp.rightMargin;
                    mTmpContainerRect.top = laneBaseHeight+lp.topMargin;
                    mTmpContainerRect.bottom = laneBaseHeight + height-lp.bottomMargin;

                } else {
                    laneWidth = 0;
                    laneBaseHeight += height;
                    int previousLaneWidth = laneWidth;
                    laneHeight += height;
                    laneWidth += width;

                    mTmpContainerRect.left = previousLaneWidth+lp.leftMargin;
                    mTmpContainerRect.right = laneWidth-lp.rightMargin;
                    mTmpContainerRect.top = laneBaseHeight+lp.topMargin;
                    mTmpContainerRect.bottom = laneBaseHeight + height-lp.bottomMargin;

                }


//                mTmpContainerRect.left = leftPos + lp.leftMargin;
//                mTmpContainerRect.right = leftPos + width + lp.rightMargin;
//                mTmpContainerRect.top = parentTop + lp.topMargin;
//                mTmpContainerRect.bottom = parentBottom - lp.bottomMargin;

               /* // Compute the frame in which we are placing this child.
                if (lp.position == LayoutParams.POSITION_LEFT) {
                    mTmpContainerRect.left = leftPos + lp.leftMargin;
                    mTmpContainerRect.right = leftPos + width + lp.rightMargin;
                    leftPos = mTmpContainerRect.right;
                } else if (lp.position == LayoutParams.POSITION_RIGHT) {
                    mTmpContainerRect.right = rightPos - lp.rightMargin;
                    mTmpContainerRect.left = rightPos - width - lp.leftMargin;
                    rightPos = mTmpContainerRect.left;
                } else {
                    mTmpContainerRect.left = middleLeft + lp.leftMargin;
                    mTmpContainerRect.right = middleRight - lp.rightMargin;
                }
               */

                // Use the child's gravity and size to determine its final
                // frame within its container.
                // Gravity.apply(lp.gravity, width, height, mTmpContainerRect, mTmpChildRect);

                // Place the child.
                child.layout(mTmpContainerRect.left, mTmpContainerRect.top,
                        mTmpContainerRect.right, mTmpContainerRect.bottom);
            }
        }


    }

    // --------------------
    public void arrangeTags() {
        int no = getChildCount();
        int w = 0;
        int h = 0;
        for (int i = 0; i < no; i++) {
            View childView = getChildAt(i);
            if (w + childView.getWidth() < parentWidth) {
                childView.setLayoutParams(new WindowManager.LayoutParams(childView.getWidth(), childView.getHeight()
                        , w, h, 0, 0, 0));
                w += childView.getWidth();
            } else {
                w = 0;
                h += childView.getHeight();
                childView.setLayoutParams(new WindowManager.LayoutParams(childView.getWidth(), childView.getHeight()
                        , w, h, 0, 0, 0));
                //add that view
                w += childView.getWidth();
            }


        }

    }


}
